# app.py
from flask import Flask, render_template, request, jsonify, url_for
import mysql.connector
import openai
import json
from config import MYSQL_CONFIG, OPENAI_API_KEY

app = Flask(__name__, static_folder='static', template_folder='templates')

# –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–ª—é—á OpenAI API
openai.api_key = OPENAI_API_KEY

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ MySQL
def get_db_connection():
    conn = mysql.connector.connect(
        host=MYSQL_CONFIG['host'],
        user=MYSQL_CONFIG['user'],
        password=MYSQL_CONFIG['password'],
        database=MYSQL_CONFIG['database']
    )
    return conn

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é OpenAI API
def refine_search_query(query):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–í–∏–∫–æ–Ω–∞–π –Ω–∞—Å—Ç—É–ø–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è: –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏ –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, "
                        "—è–∫–∏–π —Å—Ç–æ—Å—É—î—Ç—å—Å—è –∫–æ–º–ø'—é—Ç–µ—Ä–Ω–∏—Ö –∫–æ–º–ø–ª–µ–∫—Ç—É—é—á–∏—Ö, –¥–æ –Ω–∞–±–æ—Ä—É –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤, "
                        "—è–∫—ñ –º–æ–∂—É—Ç—å –º—ñ—Å—Ç–∏—Ç–∏—Å—è —É –ø–æ–ª—è—Ö name, type –∞–±–æ description –±–∞–∑–∏ –¥–∞–Ω–∏—Ö. "
                        "–í–∏–≤–µ–¥–∏ –ª–∏—à–µ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª, –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É."
                    )
                },
                {
                    "role": "user",
                    "content": query
                }
            ],
            temperature=0
        )
        refined = response.choices[0].message['content'].strip()
        return refined
    except Exception as e:
        print(f"Error in refine_search_query: {e}")
        return query

# –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É –ø–æ –≤—Å—ñ—Ö —Ç–∞–±–ª–∏—Ü—è—Ö –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —ñ–∑ —Ä–æ–∑–±–∏—Ç—Ç—è–º –∑–∞–ø–∏—Ç—É –Ω–∞ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
def universal_search_db(query):
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü—å
    cursor.execute("SHOW TABLES")
    tables = [list(row.values())[0] for row in cursor.fetchall()]
    
    search_results = []
    # –†–æ–∑–±–∏–≤–∞—î–º–æ —É—Ç–æ—á–Ω–µ–Ω–∏–π –∑–∞–ø–∏—Ç –Ω–∞ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
    tokens = query.split()
    
    for table in tables:
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ–ø–∏—Å —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
        cursor.execute(f"DESCRIBE {table}")
        columns = cursor.fetchall()
        text_columns = []
        for col in columns:
            # –í–≤–∞–∂–∞—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–º–∏ –ø–æ–ª—è, —è–∫—â–æ —Ç–∏–ø –º—ñ—Å—Ç–∏—Ç—å "char", "text" –∞–±–æ "enum"
            if "char" in col['Type'] or "text" in col['Type'] or "enum":
                text_columns.append(col['Field'])
        if not text_columns:
            continue  # –¢–∞–±–ª–∏—Ü—è –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
        
        # –§–æ—Ä–º—É—î–º–æ —É–º–æ–≤–∏ –ø–æ—à—É–∫—É –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        conditions = []
        params = []
        for token in tokens:
            sub_conditions = []
            for col in text_columns:
                sub_conditions.append(f"{col} LIKE %s")
                params.append("%" + token + "%")
            # –ö–æ–∂–Ω–µ —Å–ª–æ–≤–æ –º–∞—î –±—É—Ç–∏ –∑–Ω–∞–π–¥–µ–Ω–µ —Ö–æ—á–∞ –± –≤ –æ–¥–Ω–æ–º—É –∑ –ø–æ–ª—ñ–≤
            conditions.append("(" + " OR ".join(sub_conditions) + ")")
        
        if conditions:
            where_clause = " AND ".join(conditions)
            sql = f"SELECT * FROM {table} WHERE {where_clause}"
            try:
                cursor.execute(sql, tuple(params))
                rows = cursor.fetchall()
                if rows:
                    search_results.extend(rows)
            except Exception as e:
                print(f"Error querying table {table}: {e}")
                continue
    
    cursor.close()
    conn.close()
    return search_results

def get_performance_category(component):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
    price = float(component['price'])
    if component['type'] == 'CPU':
        if price > 300: return "high-end"
        if price > 200: return "mid-range"
        return "budget"
    # –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    return "standard"

def format_db_data_for_ai():
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    
    structured_data = {
        "components_catalog": {
            "cpu": [],
            "gpu": [],
            "ram": [],
            "storage": [],
            "other": []
        },
        "metadata": {
            "categories": [],
            "price_ranges": {},
            "specifications_schema": {}
        }
    }

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        cursor.execute("SELECT * FROM components")
        components = cursor.fetchall()
        
        for component in components:
            # –ü–∞—Ä—Å–∏–º JSON –∏–∑ specs
            specs = json.loads(component['specs'])
            category = component['type'].lower()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
            formatted_component = {
                "id": component['id'],
                "name": component['name'],
                "type": component['type'],
                "description": component['description'],
                "price": float(component['price']),
                "specifications": specs,
                "performance_category": get_performance_category(component)
            }
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            if category in structured_data["components_catalog"]:
                structured_data["components_catalog"][category].append(formatted_component)
            else:
                structured_data["components_catalog"]["other"].append(formatted_component)
                
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            if category not in structured_data["metadata"]["categories"]:
                structured_data["metadata"]["categories"].append(category)

    except Exception as e:
        print(f"Error formatting data: {e}")
    finally:
        cursor.close()
        conn.close()
        
    return structured_data

def create_ai_context():
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    
    ai_context = {
        "available_components": [],
        "inventory_summary": {
            "total_items": 0,
            "categories": {},
            "price_ranges": {}
        },
        "search_helpers": {
            "component_types": [],
            "manufacturers": [],
            "common_queries": []
        }
    }

    try:
        cursor.execute("SELECT * FROM components")
        components = cursor.fetchall()
        
        for item in components:
            specs = json.loads(item['specs'])
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
            component = {
                "name": item['name'],
                "type": item['type'],
                "price": float(item['price']),
                "specs": specs,
                "in_stock": True,  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –Ω–∞–ª–∏—á–∏—è
                "description": item['description']
            }
            
            ai_context["available_components"].append(component)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            category = item['type']
            ai_context["inventory_summary"]["categories"][category] = \
                ai_context["inventory_summary"]["categories"].get(category, 0) + 1
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
            manufacturer = item['name'].split()[0]
            if manufacturer not in ai_context["search_helpers"]["manufacturers"]:
                ai_context["search_helpers"]["manufacturers"].append(manufacturer)
                
        ai_context["inventory_summary"]["total_items"] = len(components)
        
        return ai_context
        
    finally:
        cursor.close()
        conn.close()

def prepare_data_for_ai():
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    
    try:
        cursor.execute("SELECT * FROM components")
        components = cursor.fetchall()
        
        data = {
            "inventory": {
                "components": [],
                "stats": {
                    "total": len(components),
                    "by_type": {}
                }
            }
        }
        
        for item in components:
            component = {
                "name": item['name'],
                "type": item['type'],
                "price": float(item['price']),
                "specs": json.loads(item['specs']),
                "description": item['description']
            }
            
            data["inventory"]["components"].append(component)
            
            # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            ctype = item['type']
            if ctype not in data["inventory"]["stats"]["by_type"]:
                data["inventory"]["stats"]["by_type"][ctype] = 0
            data["inventory"]["stats"]["by_type"][ctype] += 1
            
        return data
        
    finally:
        cursor.close()
        conn.close()

def format_component_details(component):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ –∫—Ä–∞—Å–∏–≤–æ–º –≤–∏–¥–µ"""
    specs_str = "\n".join([f"  ‚Ä¢ {key}: {value}" for key, value in component['specs'].items()])
    
    return f"""### {component['name']}
üìå **–¢–∏–ø**: {component['type']}
üí∞ **–¶–µ–Ω–∞**: ${component['price']}
üîß **–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏**:
{specs_str}
üìù **–û–ø–∏—Å–∞–Ω–∏–µ**: {component['description']}
"""

def format_category_header(category):
    icons = {
        "CPU": "üî≤",
        "GPU": "üéÆ",
        "RAM": "üßÆ",
        "SSD": "üíæ",
        "HDD": "üíø",
        "OTHER": "üîß"
    }
    return f"\n## {icons.get(category, 'üì¶')} {category}\n"

def format_component(component):
    specs_list = "".join([
        f"<li><strong>{key.title()}:</strong> {value}</li>" 
        for key, value in component['specs'].items()
    ])
    
    return f"""
    <div class='component'>
        <h3>{component['name']}</h3>
        <p class='price'>üí∞ <strong>–¶–µ–Ω–∞:</strong> ${component['price']}</p>
        <div class='specs'>
            <h4>üìã –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</h4>
            <ul>{specs_list}</ul>
        </div>
        <blockquote class='description'>
            <p>üìù {component['description']}</p>
        </blockquote>
    </div>
    """

def format_category(category, components):
    icons = {
        "CPU": "üî≤", "GPU": "üéÆ", "RAM": "üßÆ",
        "SSD": "üíæ", "HDD": "üíø", "OTHER": "üîß"
    }
    
    formatted = f"<div class='category'><h2>{icons.get(category, 'üì¶')} {category}</h2>"
    for comp in components:
        formatted += format_component(comp)
    formatted += "</div>"
    return formatted

def format_response(components_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —ñ –≤—ñ–¥—Å—Ç—É–ø–∞–º–∏"""
    response = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    response.append("# üè™ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ\n")
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {
        "CPU": ("üíª –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã", []),
        "GPU": ("üéÆ –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã", []),
        "RAM": ("üßÆ –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å", []),
        "SSD": ("üíæ –ù–∞–∫–æ–ø–∏—Ç–µ–ª–∏", []),
        "OTHER": ("üîß –ü—Ä–æ—á–µ–µ", [])
    }
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    for component in components_data["inventory"]["components"]:
        category = component["type"]
        if category in categories:
            categories[category][1].append(component)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for cat_key, (cat_name, components) in categories.items():
        if components:
            response.append(f"\n## {cat_name}\n")
            for comp in components:
                response.append(format_component_details(comp))
                response.append("\n---\n")
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
    response.append("\n### üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n")
    for cat, count in components_data["inventory"]["stats"]["by_type"].items():
        response.append(f"‚Ä¢ {categories.get(cat, (cat,))[0]}: {count}\n")
    
    return "\n".join(response)

def format_component_details(component):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
    return f"""### {component['name']}
üí∞ **–¶–µ–Ω–∞:** ${component['price']}

‚ö° **–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**
{format_specifications(component['specs'])}

üìù **–û–ø–∏—Å–∞–Ω–∏–µ:**
> {component['description']}"""

def format_specifications(specs):
    return "\n".join([f"‚Ä¢ {key.title()}: **{value}**" for key, value in specs.items()])

def format_bot_response(components_data):
    response = """
    <div class="bot-response">
        <div class="category-header">
            <h2>üè™ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ:</h2>
        </div>
    """
    
    categories = {
        "CPU": "üíª –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã",
        "GPU": "üéÆ –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã",
        "RAM": "üßÆ –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å",
        "SSD": "üíæ –ù–∞–∫–æ–ø–∏—Ç–µ–ª–∏"
    }
    
    for category, title in categories.items():
        components = [c for c in components_data if c["type"] == category]
        if components:
            response += f"""
                <div class="category-section">
                    <h3>{title}</h3>
                    <div class="components-list">
            """
            
            for comp in components:
                specs = "".join([
                    f'<li><span class="spec-key">{key}:</span> {value}</li>'
                    for key, value in comp["specs"].items()
                ])
                
                response += f"""
                    <div class="component-card">
                        <h4>{comp["name"]}</h4>
                        <p class="price">üí∞ –¶–µ–Ω–∞: ${comp["price"]}</p>
                        <div class="specs">
                            <p>‚ö° –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</p>
                            <ul>{specs}</ul>
                        </div>
                        <p class="description">üìù {comp["description"]}</p>
                    </div>
                """
            
            response += "</div></div>"
    
    response += "</div>"
    return response

def format_db_to_text():
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ò–ò"""
    data = prepare_data_for_ai()
    text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ:\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {}
    for comp in data["inventory"]["components"]:
        cat = comp["type"]
        if cat not in categories:
            categories[cat] = []
        categories[cat].append(comp)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    for cat, components in categories.items():
        text += f"\n{cat}:\n"
        for comp in components:
            text += f"""- {comp['name']}
  –¶–µ–Ω–∞: ${comp['price']}
  –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {', '.join([f'{k}: {v}' for k, v in comp['specs'].items()])}
  –û–ø–∏—Å–∞–Ω–∏–µ: {comp['description']}\n"""
    
    return text

# –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —ñ–∑ —á–∞—Ç-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
@app.route('/')
def index():
    return render_template('index.html')

SYSTEM_PROMPT = """–í—ã - –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–º –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∏–∂–µ.

{db_content}

–í–∞—à–∏ –∑–∞–¥–∞—á–∏:
1. –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞–ª–∏—á–∏–∏ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ
2. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
3. –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ—è—Å–µ–Ω - —É—Ç–æ—á–Ω—è—Ç—å –¥–µ—Ç–∞–ª–∏
4. –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ - —Å–æ–æ–±—â–∞—Ç—å –æ–± —ç—Ç–æ–º
5. –í—Å–µ–≥–¥–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTML

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–º–æ–¥–∑–∏:
üíª - –¥–ª—è –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
üí∞ - –¥–ª—è —Ü–µ–Ω
‚ö° - –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
üìù - –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏–π"""

@app.route('/ask', methods=['POST'])
def ask():
    user_message = request.form.get('message').strip()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –¥–ª—è –ò–ò
    db_content = format_db_to_text()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    current_prompt = SYSTEM_PROMPT.format(db_content=db_content)
    
    messages = [
        {"role": "system", "content": current_prompt},
        {"role": "user", "content": f"–ù–∞–π–¥–∏ –∏ –ø–æ–∫–∞–∂–∏ —Ç–æ–≤–∞—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: {user_message}"}
    ]

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=messages,
            temperature=0.7
        )
        bot_response = response.choices[0].message['content'].strip()
        
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        if not bot_response or "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in bot_response.lower():
            bot_response = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
            
    except Exception as e:
        bot_response = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"

    return jsonify({
        "response": bot_response
    })

if __name__ == '__main__':
    app.run(debug=True)